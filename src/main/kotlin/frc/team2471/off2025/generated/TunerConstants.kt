package frc.team2471.off2025.generated

import com.ctre.phoenix6.CANBus
import com.ctre.phoenix6.configs.*
import com.ctre.phoenix6.hardware.CANcoder
import com.ctre.phoenix6.hardware.TalonFX
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue
import com.ctre.phoenix6.swerve.SwerveDrivetrain
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants.DriveMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.math.Matrix
import edu.wpi.first.math.numbers.N1
import edu.wpi.first.math.numbers.N3
import edu.wpi.first.units.Units.Inches
import edu.wpi.first.units.measure.*
import frc.team2471.off2025.util.amps
import frc.team2471.off2025.util.inches
import frc.team2471.off2025.util.kilogramSquareMeters
import frc.team2471.off2025.util.metersPerSecond
import frc.team2471.off2025.util.rotations
import frc.team2471.off2025.util.volts
import org.team2471.frc2025.CANCoders
import org.team2471.frc2025.Falcons

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains: Slot0Configs? = Slot0Configs().apply {
        kP = 15.25
        kI = 0.0
        kD = 0.0
        kS = 0.0
        kV = 0.0
        kA = 0.0
        StaticFeedforwardSign = StaticFeedforwardSignValue.UseClosedLoopSign
    }

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs? = Slot0Configs().apply {
        kP = 1.51
        kI = 0.0
        kD = 0.0
        kS = 0.0
        kV = 0.01
    }

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val kSteerClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val kDriveClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The type of motor used for the drive motor
    private val kDriveMotorType = DriveMotorArrangement.TalonFX_Integrated

    // The type of motor used for the drive motor
    private val kSteerMotorType = SteerMotorArrangement.TalonFX_Integrated

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
    private val kSteerFeedbackType = SwerveModuleConstants.SteerFeedbackType.SyncCANcoder

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private val kSlipCurrent: Current = 120.0.amps

    // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val driveInitialConfigs = TalonFXConfiguration()
    private val steerInitialConfigs: TalonFXConfiguration? = TalonFXConfiguration()
        .withCurrentLimits(
            CurrentLimitsConfigs() // Swerve azimuth does not require much torque output, so we can set a relatively
                // low
                // stator current limit to help avoid brownouts without impacting performance.
                .withStatorCurrentLimit(60.0.amps)
                .withStatorCurrentLimitEnable(true)
        )
    private val encoderInitialConfigs = CANcoderConfiguration()

    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private val pigeonConfigs: Pigeon2Configuration? = null

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    val kCANBus: CANBus = CANBus("rio", "./logs/example.hoot")

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    @JvmField
    val kSpeedAt12Volts: LinearVelocity = 4.69.metersPerSecond

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val kCoupleRatio = 1.0

    private const val kDriveGearRatio = 5.9027777778
    private const val kSteerGearRatio = 18.75
    private val kWheelRadius: Distance = Inches.of(2.0)

    private const val kInvertLeftSide = false
    private const val kInvertRightSide = false

    private const val kPigeonId = 1

    // These are only used for simulation
    private val kSteerInertia: MomentOfInertia = 0.004.kilogramSquareMeters
    private val kDriveInertia: MomentOfInertia = 0.025.kilogramSquareMeters

    // Simulated voltage necessary to overcome friction
    private val kSteerFrictionVoltage: Voltage = 0.2.volts
    private val kDriveFrictionVoltage: Voltage = 0.2.volts

    @JvmField
    val DrivetrainConstants: SwerveDrivetrainConstants = SwerveDrivetrainConstants()
        .withCANBusName(kCANBus.name)
        .withPigeon2Id(kPigeonId)
        .withPigeon2Configs(pigeonConfigs)

    private val ConstantCreator: SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadius)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrent)
            .withSpeedAt12Volts(kSpeedAt12Volts)
            .withDriveMotorType(kDriveMotorType)
            .withSteerMotorType(kSteerMotorType)
            .withFeedbackSource(kSteerFeedbackType)
            .withDriveMotorInitialConfigs(driveInitialConfigs)
            .withSteerMotorInitialConfigs(steerInitialConfigs)
            .withEncoderInitialConfigs(encoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage)

    // Front Left
    private const val kFrontLeftDriveMotorId = Falcons.FRONT_LEFT_DRIVE
    private const val kFrontLeftSteerMotorId = Falcons.FRONT_LEFT_STEER
    private const val kFrontLeftEncoderId = CANCoders.FRONT_LEFT
    private val kFrontLeftEncoderOffset: Angle = -0.4535.rotations
    private const val kFrontLeftSteerMotorInverted = true
    private const val kFrontLeftEncoderInverted = false

    private val kFrontLeftXPos: Distance = 12.125.inches
    private val kFrontLeftYPos: Distance = 12.125.inches

    // Front Right
    private const val kFrontRightDriveMotorId = Falcons.FRONT_RIGHT_DRIVE
    private const val kFrontRightSteerMotorId = Falcons.FRONT_RIGHT_STEER
    private const val kFrontRightEncoderId = CANCoders.FRONT_RIGHT
    private val kFrontRightEncoderOffset: Angle = -0.094971.rotations
    private const val kFrontRightSteerMotorInverted = true
    private const val kFrontRightEncoderInverted = false

    private val kFrontRightXPos: Distance = 12.125.inches
    private val kFrontRightYPos: Distance = -12.125.inches

    // Back Left
    private const val kBackLeftDriveMotorId = Falcons.BACK_LEFT_DRIVE
    private const val kBackLeftSteerMotorId = Falcons.BACK_LEFT_STEER
    private const val kBackLeftEncoderId = CANCoders.BACK_LEFT
    private val kBackLeftEncoderOffset: Angle = -0.2592.rotations
    private const val kBackLeftSteerMotorInverted = true
    private const val kBackLeftEncoderInverted = false

    private val kBackLeftXPos: Distance = -12.125.inches
    private val kBackLeftYPos: Distance = 12.125.inches

    // Back Right
    private const val kBackRightDriveMotorId = Falcons.BACK_RIGHT_DRIVE
    private const val kBackRightSteerMotorId = Falcons.BACK_RIGHT_STEER
    private const val kBackRightEncoderId = CANCoders.BACK_RIGHT
    private val kBackRightEncoderOffset: Angle = 0.287.rotations
    private const val kBackRightSteerMotorInverted = true
    private const val kBackRightEncoderInverted = false

    private val kBackRightXPos: Distance = -12.125.inches
    private val kBackRightYPos: Distance = -12.125.inches

    @JvmField
    val FrontLeft: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId,
            kFrontLeftDriveMotorId,
            kFrontLeftEncoderId,
            kFrontLeftEncoderOffset,
            kFrontLeftXPos,
            kFrontLeftYPos,
            kInvertLeftSide,
            kFrontLeftSteerMotorInverted,
            kFrontLeftEncoderInverted
        )
    @JvmField
    val FrontRight: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId,
            kFrontRightDriveMotorId,
            kFrontRightEncoderId,
            kFrontRightEncoderOffset,
            kFrontRightXPos,
            kFrontRightYPos,
            kInvertRightSide,
            kFrontRightSteerMotorInverted,
            kFrontRightEncoderInverted
        )
    @JvmField
    val BackLeft: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId,
            kBackLeftDriveMotorId,
            kBackLeftEncoderId,
            kBackLeftEncoderOffset,
            kBackLeftXPos,
            kBackLeftYPos,
            kInvertLeftSide,
            kBackLeftSteerMotorInverted,
            kBackLeftEncoderInverted
        )
    @JvmField
    val BackRight: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId,
            kBackRightDriveMotorId,
            kBackRightEncoderId,
            kBackRightEncoderOffset,
            kBackRightXPos,
            kBackRightYPos,
            kInvertRightSide,
            kBackRightSteerMotorInverted,
            kBackRightEncoderInverted
        )

    /**
     * Creates a CommandSwerveDrivetrain instance. This should only be called once in your robot
     * program,.
     */
    //   public static CommandSwerveDrivetrain createDrivetrain() {
    //     return new CommandSwerveDrivetrain(
    //         DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight);
    //   }
    /** Swerve Drive class utilizing CTR Electronics' Phoenix 6 API with the selected device types.  */
    class TunerSwerveDrivetrain : SwerveDrivetrain<TalonFX?, TalonFX?, CANcoder?> {
        /**
         * Constructs a CTRE SwerveDrivetrain using the specified constants.
         *
         *
         * This constructs the underlying hardware devices, so users should not construct the devices
         * themselves. If they need the devices, they can access them through getters in the classes.
         *
         * @param drivetrainConstants Drivetrain-wide constants for the swerve drive
         * @param modules Constants for each specific module
         */
        constructor(
            drivetrainConstants: SwerveDrivetrainConstants,
            vararg modules: SwerveModuleConstants<*, *, *>?
        ) : super(
            DeviceConstructor { deviceId: Int, canbus: String? -> TalonFX(deviceId, canbus) },
            DeviceConstructor { deviceId: Int, canbus: String? -> TalonFX(deviceId, canbus) },
            DeviceConstructor { deviceId: Int, canbus: String? -> CANcoder(deviceId, canbus) },
            drivetrainConstants,
            *modules
        )

        /**
         * Constructs a CTRE SwerveDrivetrain using the specified constants.
         *
         *
         * This constructs the underlying hardware devices, so users should not construct the devices
         * themselves. If they need the devices, they can access them through getters in the classes.
         *
         * @param drivetrainConstants Drivetrain-wide constants for the swerve drive
         * @param odometryUpdateFrequency The frequency to run the odometry loop. If unspecified or set
         * to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0.
         * @param modules Constants for each specific module
         */
        constructor(
            drivetrainConstants: SwerveDrivetrainConstants,
            odometryUpdateFrequency: Double,
            vararg modules: SwerveModuleConstants<*, *, *>?
        ) : super(
            DeviceConstructor { deviceId: Int, canbus: String? -> TalonFX(deviceId, canbus) },
            DeviceConstructor { deviceId: Int, canbus: String? -> TalonFX(deviceId, canbus) },
            DeviceConstructor { deviceId: Int, canbus: String? -> CANcoder(deviceId, canbus) },
            drivetrainConstants,
            odometryUpdateFrequency,
            *modules
        )

        /**
         * Constructs a CTRE SwerveDrivetrain using the specified constants.
         *
         *
         * This constructs the underlying hardware devices, so users should not construct the devices
         * themselves. If they need the devices, they can access them through getters in the classes.
         *
         * @param drivetrainConstants Drivetrain-wide constants for the swerve drive
         * @param odometryUpdateFrequency The frequency to run the odometry loop. If unspecified or set
         * to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0.
         * @param odometryStandardDeviation The standard deviation for odometry calculation in the form
         * [x, y, theta]ᵀ, with units in meters and radians
         * @param visionStandardDeviation The standard deviation for vision calculation in the form [x,
         * y, theta]ᵀ, with units in meters and radians
         * @param modules Constants for each specific module
         */
        constructor(
            drivetrainConstants: SwerveDrivetrainConstants,
            odometryUpdateFrequency: Double,
            odometryStandardDeviation: Matrix<N3?, N1?>,
            visionStandardDeviation: Matrix<N3?, N1?>,
            vararg modules: SwerveModuleConstants<*, *, *>?
        ) : super(
            DeviceConstructor { deviceId: Int, canbus: String? -> TalonFX(deviceId, canbus) },
            DeviceConstructor { deviceId: Int, canbus: String? -> TalonFX(deviceId, canbus) },
            DeviceConstructor { deviceId: Int, canbus: String? -> CANcoder(deviceId, canbus) },
            drivetrainConstants,
            odometryUpdateFrequency,
            odometryStandardDeviation,
            visionStandardDeviation,
            *modules
        )
    }
}
