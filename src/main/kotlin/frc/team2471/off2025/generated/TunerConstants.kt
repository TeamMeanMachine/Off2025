package frc.team2471.off2025.generated

import com.ctre.phoenix6.CANBus
import com.ctre.phoenix6.configs.*
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants.DriveMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.math.geometry.Translation2d
import edu.wpi.first.math.system.plant.DCMotor
import edu.wpi.first.units.measure.*
import frc.team2471.off2025.util.*
import org.team2471.frc2025.CANCoders
import org.team2471.frc2025.Falcons
import kotlin.math.hypot

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    val driveMotor = DCMotor.getKrakenX60Foc(1)
    val steerMotor = DCMotor(12.0, 4.05, 275.0, 1.4, 7530.0.rpm.asRadiansPerSecond, 1) //x44


    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains: Slot0Configs = Slot0Configs().apply {
        kP = 50.25
        kI = 0.0
        kD = 0.0
        kS = 0.15
        kV = 0.0
        kA = 0.0
        StaticFeedforwardSign = StaticFeedforwardSignValue.UseClosedLoopSign
    }

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs = Slot0Configs().apply {
        kP = 0.3
        kI = 0.0
        kD = 0.0
        kS = 0.0
        kV = 0.15
    }

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val kSteerClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val kDriveClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The type of motor used for the drive motor
    private val kDriveMotorType = DriveMotorArrangement.TalonFX_Integrated

    // The type of motor used for the drive motor
    private val kSteerMotorType = SteerMotorArrangement.TalonFX_Integrated

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
    private val kSteerFeedbackType = SwerveModuleConstants.SteerFeedbackType.FusedCANcoder

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private val kSlipCurrent: Current = 120.0.amps

    // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val driveInitialConfigs = TalonFXConfiguration()
    private val steerInitialConfigs = TalonFXConfiguration().apply {
        CurrentLimits.apply{
            StatorCurrentLimit = 60.0
            StatorCurrentLimitEnable = true
        }
    }
    private val encoderInitialConfigs = CANcoderConfiguration()

    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private val pigeonConfigs: Pigeon2Configuration? = null

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    val kCANBus: CANBus = CANBus("rio", "./logs/example.hoot")

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val kCoupleRatio = 3.5714285714285716

    private const val kDriveGearRatio = 6.746031746031747
    private const val kSteerGearRatio = 21.428571428571427

    private const val kInvertLeftSide = false
    private const val kInvertRightSide = false

    private const val kPigeonId = 40

    // These are only used for simulation
    private val kSteerInertia: MomentOfInertia = 0.0000000004.kilogramSquareMeters
    private val kDriveInertia: MomentOfInertia = 0.025.kilogramSquareMeters

    // Simulated voltage necessary to overcome friction
    private val kSteerFrictionVoltage: Voltage = 0.2.volts
    private val kDriveFrictionVoltage: Voltage = 0.2.volts

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    val kSpeedAt12Volts: LinearVelocity = (driveMotor.freeSpeedRadPerSec / kDriveGearRatio * 2.0.inches.asFeet).feetPerSecond * 0.9  //4.73.metersPerSecond

    @JvmField
    val DrivetrainConstants: SwerveDrivetrainConstants = SwerveDrivetrainConstants().apply {
        CANBusName = kCANBus.name
        Pigeon2Id = kPigeonId
        Pigeon2Configs = pigeonConfigs
    }

    private val ConstantCreator: SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>().apply {
            DriveMotorGearRatio = kDriveGearRatio
            SteerMotorGearRatio = kSteerGearRatio

            //The ratio at which the wheel spins when the turn motor spins (driveMotorRotations/Rotations)
            CouplingGearRatio = kCoupleRatio

//            WheelRadius = 2.0.inches.asMeters

            //Type of closed loop output (Velocity Volts or Velocity Torque)
            DriveMotorClosedLoopOutput = kDriveClosedLoopOutput
            SteerMotorClosedLoopOutput = kSteerClosedLoopOutput

            //PID configs
            DriveMotorGains = driveGains
            SteerMotorGains = steerGains

            //Maximum amount of stator current the drive motors can apply without slippage.
            SlipCurrent = kSlipCurrent.asAmps
            //The speed at which the robot travels when driven with 12 volts.
            SpeedAt12Volts = kSpeedAt12Volts.asMetersPerSecond

            //Voltage required to overcome friction
            DriveFrictionVoltage = kDriveFrictionVoltage.asVolts
            SteerFrictionVoltage = kSteerFrictionVoltage.asVolts

            //Type of motor controller
            DriveMotorType = kDriveMotorType
            SteerMotorType = kSteerMotorType
            //How to integrate CANCoder. (Remote, Fused, or Synced)
            FeedbackSource = kSteerFeedbackType

            //Moment of Inertia. only used in simulation
            DriveInertia = kDriveInertia.asKilogramSquareMeters
            SteerInertia = kSteerInertia.asKilogramSquareMeters

            //Initial motor configs
            DriveMotorInitialConfigs = driveInitialConfigs
            SteerMotorInitialConfigs = steerInitialConfigs
            EncoderInitialConfigs = encoderInitialConfigs
        }


/*
    // Front Left
    private const val kFrontLeftDriveMotorId = Falcons.FRONT_LEFT_DRIVE
    private const val kFrontLeftSteerMotorId = Falcons.FRONT_LEFT_STEER
    private const val kFrontLeftEncoderId = CANCoders.FRONT_LEFT
    private val kFrontLeftEncoderOffset: Angle = -0.4535.rotations
    private const val kFrontLeftSteerMotorInverted = true
    private const val kFrontLeftEncoderInverted = false
    private val kFrontLeftWheelRadius: Distance = 2.197.inches

    private val kFrontLeftXPos: Distance = 12.125.inches
    private val kFrontLeftYPos: Distance = 12.125.inches

    // Front Right
    private const val kFrontRightDriveMotorId = Falcons.FRONT_RIGHT_DRIVE
    private const val kFrontRightSteerMotorId = Falcons.FRONT_RIGHT_STEER
    private const val kFrontRightEncoderId = CANCoders.FRONT_RIGHT
    private val kFrontRightEncoderOffset: Angle = -0.094971.rotations
    private const val kFrontRightSteerMotorInverted = true
    private const val kFrontRightEncoderInverted = false
    private val kFrontRightWheelRadius: Distance = 2.197.inches

    private val kFrontRightXPos: Distance = 12.125.inches
    private val kFrontRightYPos: Distance = -12.125.inches

    // Back Left
    private const val kBackLeftDriveMotorId = Falcons.BACK_LEFT_DRIVE
    private const val kBackLeftSteerMotorId = Falcons.BACK_LEFT_STEER
    private const val kBackLeftEncoderId = CANCoders.BACK_LEFT
    private val kBackLeftEncoderOffset: Angle = -0.2592.rotations
    private const val kBackLeftSteerMotorInverted = true
    private const val kBackLeftEncoderInverted = false
    private val kBackLeftWheelRadius: Distance = 2.197.inches

    private val kBackLeftXPos: Distance = -12.125.inches
    private val kBackLeftYPos: Distance = 12.125.inches

    // Back Right
    private const val kBackRightDriveMotorId = Falcons.BACK_RIGHT_DRIVE
    private const val kBackRightSteerMotorId = Falcons.BACK_RIGHT_STEER
    private const val kBackRightEncoderId = CANCoders.BACK_RIGHT
    private val kBackRightEncoderOffset: Angle = 0.287.rotations
    private const val kBackRightSteerMotorInverted = true
    private const val kBackRightEncoderInverted = false
    private val kBackRightWheelRadius: Distance = 2.197.inches

    private val kBackRightXPos: Distance = -12.125.inches
    private val kBackRightYPos: Distance = -12.125.inches
*/

    val FrontLeft = ModuleConfig(
        Falcons.FRONT_LEFT_DRIVE,
        Falcons.FRONT_LEFT_STEER,
        CANCoders.FRONT_LEFT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(12.125.inches, 12.125.inches),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

    val FrontRight = ModuleConfig(
        Falcons.FRONT_RIGHT_DRIVE,
        Falcons.FRONT_RIGHT_STEER,
        CANCoders.FRONT_RIGHT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(12.125.inches, -12.125.inches),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

    val BackLeft = ModuleConfig(
        Falcons.BACK_LEFT_DRIVE,
        Falcons.BACK_LEFT_STEER,
        CANCoders.BACK_LEFT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(-12.125.inches, 12.125.inches),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

    val BackRight = ModuleConfig(
        Falcons.BACK_RIGHT_DRIVE,
        Falcons.BACK_RIGHT_STEER,
        CANCoders.BACK_RIGHT,
        false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(-12.125.inches, -12.125.inches),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

/*    @JvmField
    val FrontLeft: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId,
            kFrontLeftDriveMotorId,
            kFrontLeftEncoderId,
            kFrontLeftEncoderOffset,
            kFrontLeftXPos,
            kFrontLeftYPos,
            kInvertLeftSide,
            kFrontLeftSteerMotorInverted,
            kFrontLeftEncoderInverted
        ).apply {
            WheelRadius = kFrontLeftWheelRadius.asMeters
        }*/
/*
    @JvmField
    val FrontRight: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId,
            kFrontRightDriveMotorId,
            kFrontRightEncoderId,
            kFrontRightEncoderOffset,
            kFrontRightXPos,
            kFrontRightYPos,
            kInvertRightSide,
            kFrontRightSteerMotorInverted,
            kFrontRightEncoderInverted
        ).apply {
            WheelRadius = kFrontRightWheelRadius.asMeters
        }
    @JvmField
    val BackLeft: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId,
            kBackLeftDriveMotorId,
            kBackLeftEncoderId,
            kBackLeftEncoderOffset,
            kBackLeftXPos,
            kBackLeftYPos,
            kInvertLeftSide,
            kBackLeftSteerMotorInverted,
            kBackLeftEncoderInverted
        ).apply {
            WheelRadius = kBackLeftWheelRadius.asMeters
        }
    @JvmField
    val BackRight: SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId,
            kBackRightDriveMotorId,
            kBackRightEncoderId,
            kBackRightEncoderOffset,
            kBackRightXPos,
            kBackRightYPos,
            kInvertRightSide,
            kBackRightSteerMotorInverted,
            kBackRightEncoderInverted
        ).apply {
            WheelRadius = kBackRightWheelRadius.asMeters
        }*/


    val DRIVE_BASE_RADIUS: Double = maxOf(
        hypot(FrontLeft.LocationX, FrontLeft.LocationY),
        hypot(FrontRight.LocationX, FrontRight.LocationY),
        hypot(BackLeft.LocationX, BackLeft.LocationY),
        hypot(BackRight.LocationX, BackRight.LocationY)
    )
    /** Returns the maximum angular speed in radians per sec.  */
    val maxAngularSpeedRadPerSec: AngularVelocity = (kSpeedAt12Volts.asMetersPerSecond / DRIVE_BASE_RADIUS).radiansPerSecond

    /** Returns an array of module translations. */
    val moduleTranslations = arrayOf(
        Translation2d(FrontLeft.LocationX, FrontLeft.LocationY),
        Translation2d(FrontRight.LocationX, FrontRight.LocationY),
        Translation2d(BackLeft.LocationX, BackLeft.LocationY),
        Translation2d(BackRight.LocationX, BackRight.LocationY)
    )


    class ModuleConfig(
        val driveMotorID: Int,
        val steerMotorID: Int,
        val canCoderID: Int,
        val driveMotorInverted: Boolean,
        val steerMotorInverted: Boolean,
        val encoderInverted: Boolean,
        val moduleTranslationMeters: Translation2d,
        val wheelRadius: Distance
    ) {
        fun createModuleConstants(): SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
            ConstantCreator.createModuleConstants(
                steerMotorID,
                driveMotorID,
                canCoderID,
                PhoenixUtil.getMagnetSensorOffsetFromCANcoderID(canCoderID, kCANBus.name),//Double.POSITIVE_INFINITY.degrees, //we do our own encoder offset. this makes the CTRE Swerve not apply a MagnetOffset on the cancoder
                moduleTranslationMeters.x.meters,
                moduleTranslationMeters.y.meters,
                driveMotorInverted,
                steerMotorInverted,
                encoderInverted
            ).withWheelRadius(wheelRadius)
    }
}
