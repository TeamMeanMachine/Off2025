package frc.team2471.off2025.generated

import com.ctre.phoenix6.CANBus
import com.ctre.phoenix6.configs.*
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants.DriveMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.math.geometry.Translation2d
import edu.wpi.first.math.system.plant.DCMotor
import edu.wpi.first.units.measure.*
import frc.team2471.off2025.util.*
import org.team2471.frc2025.CANCoders
import org.team2471.frc2025.CANSensors
import org.team2471.frc2025.Falcons

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    val driveMotor = DCMotor.getKrakenX60Foc(1)!!
    val steerMotor = DCMotor(12.0, 4.05, 275.0, 1.4, 7530.0.rpm.asRadiansPerSecond, 1) //x44

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains: Slot0Configs = Slot0Configs().apply {
        kP = 50.25
        kI = 0.0
        kD = 0.0
        kS = 0.15
        kV = 0.0
        kA = 0.0
        StaticFeedforwardSign = StaticFeedforwardSignValue.UseClosedLoopSign
    }

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs = Slot0Configs().apply {
        kP = 0.3
        kI = 0.0
        kD = 0.0
        kS = 0.0
        kV = 0.133361718
    }

    // Initial configs for the drive/steer motors and encoder, these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val encoderInitialConfigs = CANcoderConfiguration()
    private val driveInitialConfigs = TalonFXConfiguration()
    private val steerInitialConfigs = TalonFXConfiguration().apply {
        CurrentLimits.apply{
            StatorCurrentLimit = 60.0
            StatorCurrentLimitEnable = true
        }
    }
    private val pigeonInitialConfigs: Pigeon2Configuration? = null //Leave this null to skip applying Pigeon 2 configs

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    val driveCANBus: CANBus = CANBus("rio", "./logs/example.hoot")

    private const val driveGearRatio = 6.746031746031747
    private const val steerGearRatio = 21.428571428571427

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    val kSpeedAt12Volts: LinearVelocity = (driveMotor.freeSpeedRadPerSec / driveGearRatio * 2.0.inches.asFeet).feetPerSecond * 0.9  //4.73.metersPerSecond

    val drivetrainConstants: SwerveDrivetrainConstants = SwerveDrivetrainConstants().apply {
        CANBusName = driveCANBus.name
        Pigeon2Id = CANSensors.PIGEON
        Pigeon2Configs = pigeonInitialConfigs
    }

    private val constantCreator: SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>().apply {
            //Initial motor configs
            DriveMotorInitialConfigs = driveInitialConfigs
            SteerMotorInitialConfigs = steerInitialConfigs
            EncoderInitialConfigs = encoderInitialConfigs

            //gear ratios
            DriveMotorGearRatio = driveGearRatio
            SteerMotorGearRatio = steerGearRatio

            /**
             * The ratio at which the drive wheel spins when the turn spins (driveMotorRotations/Rotations)
             * Every 1 rotation of the steer results in kCoupleRatio drive motor turns.
             * Found by wedging an object inside the drive wheel (preventing the drive wheel from spinning) then,
             * measuring the delta of the drive motor position when the steer is rotated 1 rotation.
             **/
            CouplingGearRatio = 3.5714285714285716

            /**
             * Type of closed loop output (Velocity Volts or Velocity Torque)
             * This affects the units of PID/FF gains for the motors.
             */
            DriveMotorClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage
            SteerMotorClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

            //PID
            DriveMotorGains = driveGains
            SteerMotorGains = steerGains

            /**
             * The stator current at which the wheels start to slip, in amps.
             * Maximum amount of stator current the drive motors can apply without slippage.
            */
            SlipCurrent = 120.0

            /** The max speed of the robot when driven with 12 volts. */
            SpeedAt12Volts = kSpeedAt12Volts.asMetersPerSecond

            /**
             * Type of motor controller
             * The type of motor used for the drive/steer motor
            */
            DriveMotorType = DriveMotorArrangement.TalonFX_Integrated
            SteerMotorType = SteerMotorArrangement.TalonFX_Integrated

            /**
             * How to use the CANCoder. (Remote, Fused, or Synced)
             * The remote sensor feedback type to use for the steer motors;
             * When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
            */
            FeedbackSource = SwerveModuleConstants.SteerFeedbackType.FusedCANcoder

            /** Moment of Inertia. only used in simulation */
            DriveInertia = 0.025
            SteerInertia = 0.0000000004

            /** Simulated voltage required to overcome friction. (Possibly only used in sim) */
            DriveFrictionVoltage = 0.2.volts.asVolts
            SteerFrictionVoltage = 0.2.volts.asVolts

//            WheelRadius = 2.0.inches.asMeters //<- wheel radius is set during module config
        }

    //Usually swerve drives are square
    val moduleTrackWidth = 12.125.inches

    val frontLeft = ModuleConfig(
        Falcons.FRONT_LEFT_DRIVE,
        Falcons.FRONT_LEFT_STEER,
        CANCoders.FRONT_LEFT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(moduleTrackWidth, moduleTrackWidth),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

    val frontRight = ModuleConfig(
        Falcons.FRONT_RIGHT_DRIVE,
        Falcons.FRONT_RIGHT_STEER,
        CANCoders.FRONT_RIGHT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(moduleTrackWidth, -moduleTrackWidth),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

    val backLeft = ModuleConfig(
        Falcons.BACK_LEFT_DRIVE,
        Falcons.BACK_LEFT_STEER,
        CANCoders.BACK_LEFT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(-moduleTrackWidth, moduleTrackWidth),
        wheelRadius = 2.0.inches
    ).createModuleConstants()

    val backRight = ModuleConfig(
        Falcons.BACK_RIGHT_DRIVE,
        Falcons.BACK_RIGHT_STEER,
        CANCoders.BACK_RIGHT,
        driveMotorInverted = false,
        steerMotorInverted = true,
        encoderInverted = false,
        moduleTranslationMeters = Translation2d(-moduleTrackWidth, -moduleTrackWidth),
        wheelRadius = 2.0.inches
    ).createModuleConstants()



    val moduleConfigs = arrayOf(frontRight, frontLeft, backRight, backLeft)

    /** Returns an array of module translations. */
    val moduleTranslationsMeters = moduleConfigs.map { Translation2d(it.LocationX.meters, it.LocationY.meters) }

    val driveBaseRadius = moduleTranslationsMeters.maxOf { it.norm }.meters

    /** Returns the maximum angular speed in radians per sec.  */
    val maxAngularSpeedRadPerSec: AngularVelocity = (kSpeedAt12Volts.asMetersPerSecond / driveBaseRadius.asMeters).radiansPerSecond


    class ModuleConfig(
        val driveMotorID: Int,
        val steerMotorID: Int,
        val canCoderID: Int,
        val driveMotorInverted: Boolean,
        val steerMotorInverted: Boolean,
        val encoderInverted: Boolean,
        val moduleTranslationMeters: Translation2d,
        val wheelRadius: Distance
    ) {
        fun createModuleConstants(): SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
            constantCreator.createModuleConstants(
                steerMotorID,
                driveMotorID,
                canCoderID,
                //We do our own encoder offset inside [DriveIOCTRE]. This makes the CTRE Swerve library not apply a different MagnetOffset on the CANCoder.
                PhoenixUtil.getMagnetSensorOffsetFromCANcoderID(canCoderID, driveCANBus.name),//Double.POSITIVE_INFINITY.degrees,
                moduleTranslationMeters.x.meters,
                moduleTranslationMeters.y.meters,
                driveMotorInverted,
                steerMotorInverted,
                encoderInverted
            ).withWheelRadius(wheelRadius)
    }
}
